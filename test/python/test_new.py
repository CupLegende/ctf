import unittest
import ctf
import numpy

class newtest(unittest.TestCase):
    def test(self):
        #a0 = numpy.arange(16.).reshape(2,2,2,2)
        #a0 = numpy.random.rand(2,4,3,3,1)
        #a0  =numpy.random.rand(2,4,2)
        #a0 = numpy.array([[[1.0,2.0],[0.0,0.0]],[[1.0,3.0],[0.0,4.0]]],dtype=numpy.float64)
        a00 = numpy.array([[[0.0+3j,2.0-6j],[1.0,0.0]],[[0.0,0.0],[0.0,0.0]]],dtype=numpy.complex128)
        #a0 = numpy.array([0.,0.,1.,0.,2.,2.]).reshape(2,3)
        #a1 = ctf.astensor(a0)
        a11 = ctf.astensor(a00)
        b = numpy.arange(16).reshape(2,2,2,2)
        #b = b.astype(numpy.complex64)
        c = numpy.arange(32).reshape(2,2,2,2,2)
        b1 = ctf.astensor(b)
        c1 = ctf.astensor(c)
        #print(ctf.exp(b1))
        #print(ctf.exp(b1).dtype)
        #print(ctf.sum(b1, axis=1))
        #print(ctf.diagonal(b1))
        #print(ctf.diagonal(c1))
        #print(ctf.trace(c1))
        #print(ctf.diag(b1))
        d = numpy.arange(120).reshape(5,2,3,4)
        d = d.astype(numpy.int32)
        e = numpy.arange(24).reshape(3,4,2)
        e = e.astype(numpy.float64)
        d1 = ctf.astensor(d)
        e1 = ctf.astensor(e)
        print(ctf.tensordot(d1,e1, axes=2))
        d = e.reshape(2,3,4)
        d1 = ctf.astensor(d)
        print(ctf.tensordot(d1,e1, axes=([2,1,0],[0,1,2])))
        #print(ctf.tensordot(d1,e1, axes=0))
        #print(ctf.diagonal(b1))
        #print(ctf.diagonal(d1,offset=1))
        #print(ctf.diagonal(d1,offset=-1))
        #print(ctf.diagonal(d1,offset=-2))
        #print(ctf.diagonal(d1,offset=-3))
        #print(ctf.diagonal(c1,offset=1))
        #print(ctf.diagonal(c1,offset=-1))
        #print(ctf.diagonal(c1,offset=2))
        #print(ctf.diagonal(c1,offset=3))
        #print(ctf.diagonal(c1,offset=-1))
        #print(ctf.diagonal(c1))
        #print(ctf.diagonal(c1,offset=-1, axis1=1, axis2=0))
        #print(ctf.diagonal(c1,offset=-2))
        #print(ctf.trace(b1,offset=3))
        #print(ctf.trace(b1))
        #print(ctf.reshape(c1,8))
        #print(ctf.reshape(c1,(2,-1)))
        #print(ctf.reshape(c1,(2,4)))
        #print(ctf.reshape(c1,(-1,8)))
        #print(b1.get_slice((0,0),(2,2)))
        #print(c1.reshape(2,-1))
        #print(c1.reshape(2,4))
        #print(c1.reshape(8))
        #print(a0.T)
        #print(a1.T())
        #a2 = ctf.copy(a1)
        #print(a1.size)
        #print(a1.ndim)
        #print(a1.itemsize)
        #print(a1.nbytes)
        #print(a1.strides)
        #print(a1.flags)
        #print(a2.all(out=numpy.array(1, dtype=numpy.float64)))
        #print(a3.all(out=numpy.array(1, dtype=numpy.float64)))
        #print(numpy.all(a2, keepdims = True))
        #print(ctf.all(a3, keepdims = True))
        
        #a6 = ctf.astensor(a5)
        #print(numpy.sum(a0, axis=0))
        #print(ctf.sum(a1, axis=0))
        #print(numpy.all(a2,axis=(0,1)))
        #print(ctf.all(a3,axis=(0,1)))
        #print(numpy.sum(a5, axis=(0,)))
        #print(a1.astype(int, casting='unsafe', copy=False))
        #print(ctf.sum(a6, axis=(0,)))
        #print(numpy.sum(a2,axis=0))
        #print(ctf.sum(a3,axis=0))
        #print(numpy.transpose(a0, axes=(1,0,2)))
        #print(ctf.transpose(a1, axes=(1,0,2)))
        #print(ctf.reshape(a1, (8,)))
        #print(numpy.take(a0,numpy.array([[1,2]])))
        #print(ctf.take(a1,numpy.array([[1,2]])))
        #print(ctf.reshape(a1,(2,4)))
        #print(a1.reshape((2,4)))
        #print(a1.copy())
        #print(ctf.astensor(a2))
        #print(ctf.ravel(a1))
        #print(numpy.sum(a0,axis = 1))
        #print(ctf.sum(a1,axis = 1))
#310
#256
#319
#348
#375 -> read all and read local?
#389 -> write and write slice
#677 -> A.i("ii") << 1.0        

if __name__ == "__main__":
    print("Tests for new")
    unittest.main()
